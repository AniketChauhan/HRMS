@model HRMS.Models.HRMS_TrainingApproval
@*@using HRMS.Models;*@
@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>
<hr />

<style type="text/css">

    .btn_save {
        display: none;
    }

    .btn_cancel {
        display: none;
    }

    #saveQuestionsList {
        display: inline;
    }
</style>

<div class="form-horizontal row">
    <div class="col-md-6">

        <div class="form-group">
            <label class="control-label col-md-4">Transaction Date</label>
            <div class="col-md-8">
                <input type="datetime" value="@ViewBag.TransactionDate" class="form-control" readonly="readonly" />
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-4"> ID</label>

            <div class="col-md-8">
                <input type="number" value="@ViewBag.ID" class="form-control" readonly="readonly" />

            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-4"> FromDate</label>

            <div class="col-md-8">
                <input type="datetime" value="@ViewBag.FromDate" class="form-control" readonly="readonly" />

            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-4"> ToDate</label>

            <div class="col-md-8">
                <input type="datetime" value="@ViewBag.ToDate" class="form-control" readonly="readonly" />

            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-4"> Program Type</label>

            <div class="col-md-8">
                <input type="text" value="@ViewBag.ProgramType" class="form-control" readonly="readonly" />

            </div>
        </div>
    </div>
    <div class="col-md-6">
        <br />
        <br />
        <div class="form-group">
            <label class="control-label col-md-4"> Program Name</label>

            <div class="col-md-8">
                <input type="text" value="@ViewBag.ProgramName" class="form-control" readonly="readonly" />

            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-4"> FromTime</label>

            <div class="col-md-8">
                <input type="time" value="@ViewBag.FromTime" class="form-control" readonly="readonly" />

            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-4"> ToTime</label>

            <div class="col-md-8">
                <input type="time" value="@ViewBag.ToTime" class="form-control" readonly="readonly" />

            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-4"> Training Type</label>

            <div class="col-md-8">
                <input type="text" value="@ViewBag.TrainingType" class="form-control" readonly="readonly" />
            </div>
        </div>

    </div>

</div>
<hr class="" />
<div class="container " id="questionform">
    @using (Ajax.BeginForm("EditEmployeeSelectiondata", "EmployeeSelection", new AjaxOptions { HttpMethod = "POST", OnSuccess = "successEmployee", OnFailure = "FailureEmployee" }))
    {
        <div class="form-horizontal row">

            <div class="col-md-6">
                <div class="form-group " style="">

                    @Html.HiddenFor(model => model.Program_ID)

                    @Html.LabelFor(model => model.EMP_ID, htmlAttributes: new { @class = "control-label col-md-2 required" })
                    <div class="col-md-3 ">
                        @Html.EditorFor(model => model.EMP_ID, new { htmlAttributes = new { @class = "form-control", @id = "Employee", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.EMP_ID, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-7">
                        <input type="text" id="Search" name="Search" class="form-control col-md-4" placeholder="Search Here" />
                        
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.FromDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.FromDate, new { htmlAttributes = new { @class = "form-control ", @id = "", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.FromDate, "", new { @class = "text-danger" })

                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.FromTime, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.FromTime, new { htmlAttributes = new { @class = "form-control", @Type = "time", @id = "" } })
                        @Html.ValidationMessageFor(model => model.FromDate, "", new { @class = "text-danger" })

                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <br />
                <br />
                <div class="form-group">
                    @Html.LabelFor(model => model.ToDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.ToDate, new { htmlAttributes = new { @class = "form-control ", @id = "", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.FromDate, "", new { @class = "text-danger" })

                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ToTime, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.ToTime, new { htmlAttributes = new { @class = "form-control", @Type = "time", @id = "" } })
                        @Html.ValidationMessageFor(model => model.FromDate, "", new { @class = "text-danger" })

                    </div>
                </div>
            </div>


        </div>
        <div class="form-group">
            <center>
                <input type="submit" onclick="" value="Add Employee" class="btn btn-primary btn-sm" />
            </center>
        </div>
    }
</div>
<hr />
<div class="container-fluid" id="MainEmployeeContainer">

    <table class="table table-bordered table-responsive table-striped">
        <tr style="background-color:lightgray">

            <th>
                <center>
                    Employee Code
                </center>
            </th>

            <th>
                <center>
                    Employee Name
                </center>
            </th>

            <th>
                <center>
                    From Date
                </center>
            </th>

            <th>
                <center>
                    To Date
                </center>
            </th>

            <th>
                <center>
                    From Time
                </center>
            </th>

            <th>
                <center>
                    To Time
                </center>
            </th>
            <th><center><i class="glyphicon glyphicon-wrench"> </i> Operations</center></th>
        </tr>
        <tbody id="EmployeeTable">
        </tbody>

    </table>

</div>
@Html.ActionLink("Go Back", "Index", "TrainingApproval", new { area = "" }, new { @class = "btn btn-link " })

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
}
<script src="~/Scripts/jquery-3.4.1.min.js"></script>

<script>
      var ProgramID;
    $(document).ready(function () {
        ProgramID = @Html.Raw(Json.Encode(Model.Program_ID));
        getEmployeeList(ProgramID);
    })
    function ToJavaScriptDate(value) {
        var pattern = /Date\(([^)]+)\)/;
        var results = pattern.exec(value);
        var dt = new Date(parseFloat(results[1]));
        //return (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();
        return dt.getFullYear() + "/" + (dt.getMonth() + 1) + "/" + dt.getDate();

    }
    function successEmployee(res) {

        if (res != null) {
            if (res == "Employee is already exist for this program!") {
                alert(res);
                getEmployeeList(ProgramID);
                document.getElementById('Employee').value = "";
                document.getElementById('Search').value = "";
            

            }
            else {
                document.getElementById('Employee').value = "";
                document.getElementById('Search').value = "";
                alert(res);
                getEmployeeList(ProgramID);

            }
        }
    }
    function FailureEmployee(res) {

        alert("failed");
    }
    $(document).on('click', '.btn_edit', function (event) {
        event.preventDefault();
        var tbl_row = $(this).closest('tr');

        var row_id = tbl_row.attr('row_id');

        tbl_row.find('.btn_save').show();
        tbl_row.find('.btn_cancel').show();
        tbl_row.find('.btn_cancelQuestion').hide();

        //hide edit button
        tbl_row.find('.btn_edit').hide();

        //make the whole row editable
        tbl_row.find('.row_data')
            .removeAttr('readonly')

        //--->add the original entry > start
        tbl_row.find('.row_data').each(function (index, val) {
            //this will help in case user decided to click on cancel button
            $(this).attr('original_entry', $(this).html());
        });
        //--->add the original entry > end

    });

    $(document).on('click', '.btn_cancel', function (event) {
        event.preventDefault();

        var tbl_row = $(this).closest('tr');

        var row_id = tbl_row.attr('row_id');

        //hide save and cacel buttons
        tbl_row.find('.btn_save').hide();
        tbl_row.find('.btn_cancel').hide();

        //show edit button
        tbl_row.find('.btn_edit').show();
        tbl_row.find('.btn_cancelQuestion').show();

        //make the whole row editable
        tbl_row.find('.row_data')
            .attr('readonly', 'readonly')

        tbl_row.find('.row_data').each(function (index, val) {
            $(this).html($(this).attr('original_entry'));
        });
    });
    $(document).on('click', '.btn_save', function (event) {
        debugger;
        event.preventDefault();
        var tbl_row = $(this).closest('tr');

        var row_id = tbl_row.attr('row_id');


        //hide save and cacel buttons
        tbl_row.find('.btn_save').hide();
        tbl_row.find('.btn_cancel').hide();

        //show edit button
        tbl_row.find('.btn_edit').show();
        tbl_row.find('.btn_cancelQuestion').show();


        //make the whole row editable
        tbl_row.find('.row_data')
            .attr('readonly', 'readonly')


        //--->get row data > start
        var arr = {};
        tbl_row.find('.row_data').each(function (index, val) {
            var col_name = $(this).attr('col_name');
            var col_val = $(this).val();
            arr[col_name] = col_val;
        });
        //--->get row data > end

        //use the "arr"	object for your ajax call
        $.extend(arr, { row_id: row_id });
        QuestionData(arr);
        //out put to show
        //$('.post_msg').html('<pre class="bg-success">' + JSON.stringify(arr, null, 2) + '</pre>')


    });
    function getEmployeeList(ProgramID) {
        //document.getElementById("").disabled = false;
        //$("#saveQuestionsList").show();

        $.get("/EmployeeSelection/GetEmployees", { ProgramId: ProgramID }, function (data) {
            if (data == "") {
                $("#MainEmployeeContainer").hide();
            } else {
                $("#MainEmployeeContainer").show();

            $("#EmployeeTable").empty();
            $.each(data, function (index, item) {
                var Fromhours = item.FromTime.Hours;
                var Fromminutes = item.FromTime.Minutes;
                var Tohours = item.ToTime.Hours;
                var Tominutes = item.ToTime.Minutes;
                var tbody = "";

                tbody += "<tr row_id='" + item.ID + "' id='" + item.ID + "'>";
                tbody += "<td class=''><center>" + item.EMP_ID + "</center></td>";
                tbody += "<td class=''><center>" + item.EmpName + "</center></td>";
                tbody += "<td class=''><center><input type='datetime' value='" + ToJavaScriptDate(item.FromDate) + "'class='form-control' readonly='readonly'/></center></td>";
                tbody += "<td class=''><center><input type='datetime' value='" + ToJavaScriptDate(item.ToDate) + "'class='form-control 'readonly='readonly'/></center></td>";
                tbody += "<td class=''><center><input type='time' value='" + Fromhours + ":" + Fromminutes + "'class='form-control row_data'col_name='FromTime' readonly='readonly'/></center></td>";
                tbody += "<td class=''><center><input type='time' value='" + Tohours + ":" + Tominutes + "'class='form-control row_data'col_name='ToTime' readonly='readonly'/></center></td>";
                tbody += "<td class=''><center><span class='btn_edit' > <a href='#' class='btn btn-link ' row_id='" + item.ID + "'>Edit</a> </span> &nbsp; <span class='btn_save' > <a href='#' class='btn btn-link ' row_id='" + item.ID + "'>Save</a></span>&nbsp;<span class='btn_cancel' ><a href='#' class='btn btn-link ' row_id='" + item.ID + "'>Cancel</a> </span> &nbsp; <button class='btn btn-danger btn-sm glyphicon glyphicon-trash btn_cancelQuestion' onclick='return RemoveFromList(" + item.ID + ")'>Remove</button></center></td>";
                tbody += "</tr>";
                $("#EmployeeTable").append(tbody);
            });

            }
        });
    }
      function QuestionData(arr) {
         var data = JSON.stringify({
             'id': arr.row_id,
             'FromTime': arr.FromTime,
             'ToTime':arr.ToTime
        });
        $.ajax({
        type: "POST",
            contentType: "application/json",
            url: "@Url.Action("UpdateEmployeedata", "EmployeeSelection")",
            datatype: "json",
            data: data,
            success: function (response) {
                alert(response);
                getEmployeeList(ProgramID);

            }
        });
    }

      function RemoveFromList(id) {
         var data = JSON.stringify({
            'id': id
        });
        $.ajax({
        type: "POST",
            contentType: "application/json",
            url: "@Url.Action("deleteEmployee", "EmployeeSelection")",
            datatype: "json",
            data: data,
            success: function (response) {
                //debugger;
                getEmployeeList(ProgramID);

            }
        });
    }
</script>


<link href="~/Content/themes/base/jquery-ui.min.css" rel="stylesheet" />

<script>
    $(function () {

        $(".datepicker").datepicker({

            dateFormat: "yy-mm-dd",
            changeMonth: true,
            changeYear: true,
            yearRange: "1920:2020",
            orientation: "right top",
            maxDate: new Date()



        });
        //$('#ui-datepicker-div').css('clip', 'auto');

    });
</script>


<script type="text/javascript">

    $(function () {
        $("#Search").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/FacultyMaster/AutoComplete/',
                    data: "{ 'prefix': '" + request.term + "'}",
                    dataType: "json",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        response($.map(data, function (item) {
                            return item;
                        }))
                    },
                    error: function (response) {
                        alert(response.responseText);
                    },
                    failure: function (response) {
                        alert(response.responseText);
                    }
                });
            },
            select: function (e, i) {
                $("#Employee").val(i.item.val);

            },
            minLength: 1
        });
    });
</script>
